/*
    main.me -- MakeMe for the EmbedThis Updater
 */

Me.load({
    plugins: [ 'installs' ],

    blend: [
        'src/**.me'
    ],

    configure: {
        requires:  [ 'osdep' ],
    },

    settings: {
        build: 'build',
        static: true,
        compiler: {fortify: true},
        integrate: true,
        prefixes: 'install-prefixes',
        mbedtls: {
            compact: false,
        },
        tls: 'openssl',
        tune: 'size',
    },

    targets: {
        r: {
            configurable: true,
            description: 'Safe portable runtime',
            depends: ['libr'],
        },
        libupdater: {
            type: 'lib',
            depends: [ 'osdep' ],
            includes: [ 'src', 'src/osdep' ],
            headers: [ 'src/*.h' ],
            sources: [ 'src/updater.c' ],
            postresolve: `
                if (me.platform.os == 'macosx') {
                    me.target.includes.push('/opt/homebrew/include')
                } else if (me.platform.os == 'windows') {
                    me.target.includes.push(Path('$(USERPROFILE)/vcpkg/installed/x64-windows'))
                    me.target.includes.push(Path('C:/Program Files/OpenSSL'))
                }
            `
        },
        updater: {
            type: 'exe',
            sources: [ 'src/main.c' ],
            depends: [ 'libupdater', 'osdep' ],
            libpaths: [],
            postresolve: `
                if (me.platform.os == 'windows') {
                    me.target.libpaths.push(Path('$(ME_COM_OPENSSL_PATH)/lib/VC/$(ARCH)/MDd'))
                    me.target.libraries.push('libcrypto.lib', 'libssl.lib')
                } else if (me.platform.os == 'macosx') {
                    me.target.libpaths.push('/opt/homebrew/lib')
                    me.target.libraries.push('crypto', 'ssl')
                } else {
                    me.target.libraries.push('crypto', 'ssl')
                }
            `
        },

        package: {
            depends: ['packagePak'],
        },

        packageSource: { },

        projects: {
            action: `
                genProjects('', ['default'], ['freertos-arm', 'freebsd-arm', 'linux-x64', 'macosx-arm64', 'vxworks-arm', 'windows-x64'] )
                run('bash bin/fixProjects')
            `
        },

        mine: {
            action: `genProjects('', 'mine', Config.OS + '-' + Config.CPU)`,
        },

        format: {
            shell: `uncrustify -q -c .uncrustify --replace --no-backup  src/*.{c,h} test/*.tst.c`
        },
    },

    manifest: {
        packages: {
            pak: {
                inherit:    'package-manifest',
                prefixes:   [ 'src'],
                formats:    [ 'tar' ],
                sets:       [ 'pak' ],
            },
        },
        sets: {
            pak: [
                {
                    from:       'dist.me',
                    to:         '${src}/dist/r.me',

                },{
                    from:       'CLAUDE.md',
                    to:         '${src}/dist',

                },{
                    from:       'src/r.h',
                    to:         '${src}/dist/r.h',
                    
                },{
                    from: [
                                'src/*.h',
                                'src/*.c',
                    ],
                    to:        '${src}/dist/updater.c',
                    append:    true,
                    header:    '/*\n * ${settings.title} Library Source\n */\n\n#include "r.h"\n\n#if ME_COM_UPDATER\n',
                    footer:    '#else\nvoid dummyUpdater(){}\n#endif /* ME_COM_UPDATER */',
                    divider:   true,
                    filter:    /^#inc.*updater.*$/mg,

                },{
                    from:       ['doc/api/updater.html', 'doc/api/updater.tags', 'doc/api/updater.dtags'],
                    to:         '${src}/doc/api/',
                    relative:   'doc/api',
                },
            ],
        },
	},
})
